// Generated by CoffeeScript 1.9.3
(function() {
  var Classes, D, DisplayBlock, DisplayFull, React, classesList, cx,
    slice = [].slice;

  React = require('react');

  D = React.DOM;

  cx = require('classnames');

  classesList = require('./classesList');

  DisplayBlock = React.createFactory(React.createClass({
    render: function() {
      return D.div({
        className: 'entry'
      }, D.div({
        className: 'inner'
      }, D.h3({}, this.props.data.title), D.p({}, this.props.data.desc)), D.p({
        className: 'more',
        onClick: (function(_this) {
          return function() {
            return _this.props.cb(_this.props.id);
          };
        })(this)
      }, 'More'));
    }
  }));

  DisplayFull = React.createFactory(React.createClass({
    getColor: function() {
      var colors;
      colors = ['#b3eacb', '#b2d4e4', '#ddf8be'];
      return colors[this.props.id % 3];
    },
    render: function() {
      return D.span({
        className: 'large',
        style: {
          backgroundColor: this.getColor()
        }
      }, D.div({
        className: 'inner'
      }, D.h3({}, this.props.data.title), D.p({}, this.props.data.desc), D.p({}, 'Taught in ', this.props.data.semester, ' for ', this.props.data.grade, ' students at ', this.props.data.type, '.'), (this.props.data.excerpt ? D.p({}, D.b({}, 'Fun Fact: '), this.props.data.excerpt) : void 0), (this.props.data.materials ? D.p({}, D.b({}, 'Materials: '), D.span({
        dangerouslySetInnerHTML: {
          __html: this.props.data.materials
        }
      })) : void 0)), D.p({
        className: 'exit',
        onClick: (function(_this) {
          return function() {
            return _this.props.cb(-1);
          };
        })(this)
      }, D.i({
        className: 'fa fa-close fa-2x'
      })));
    }
  }));

  Classes = React.createClass({
    getInitialState: function() {
      return {
        openID: -1
      };
    },
    setOpenID: function(id) {
      return this.setState({
        openID: id
      });
    },
    render: function() {
      var i;
      return D.div({
        className: 'classes'
      }, D.div({
        className: 'intro'
      }, D.h2({}, 'I ', D.span({
        className: 'highlight'
      }, 'teach'), ' things.'), D.p({}, 'Freshman year at MIT, I joined the ', D.a({
        href: 'https://esp.mit.edu/about/index.html'
      }, 'Educational Studies Program'), ' (ESP), and have since developed and taught over 50 hours of classes to hundreds of middle ', 'and high school students from the Boston area and beyond. My classes, like my interests, ', 'cover a wide range of topics from linguistics to web design to computer networking and systems. ', 'I\'ve also taught a handful of classes outside of ESP, through the ', D.a({
        href: 'http://www.cee.org/research-science-institute'
      }, 'Research Science Institute'), ' (RSI) and the ', D.a({
        href: 'https://sipb.mit.edu/iap/'
      }, 'Student Information Processing Board'), ' (SIPB).'), D.p({}, "Click on 'more' below each class to learn more about it!")), D.div({
        className: 'border'
      }), D.div.apply(D, [{
        className: 'body block-display'
      }].concat(slice.call((function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = classesList.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(this.state.openID === i ? [
            DisplayBlock({
              id: i,
              data: classesList[i],
              cb: this.setOpenID
            }), DisplayFull({
              id: this.state.openID,
              data: classesList[this.state.openID],
              cb: this.setOpenID
            })
          ] : [
            DisplayBlock({
              id: i,
              data: classesList[i],
              cb: this.setOpenID
            })
          ]);
        }
        return results;
      }).call(this)), slice.call((function() {
        var j, results;
        results = [];
        for (i = j = 1; j <= 3; i = ++j) {
          results.push(D.div({
            className: 'filler'
          }));
        }
        return results;
      })()))));
    }
  });

  module.exports = Classes;

}).call(this);
